@cli.command("show-log")
@click.argument('run_id', type=str) # Changed from run_id_uri_str, assumes plain string ID
@click.option('--show-human-readable', '-hr', is_flag=True, default=False,
              help="Also display content of human-readable JSON logs if available.")
@pass_cli_context
def show_log(ctx: CliContext, run_id: str, show_human_readable: bool):
    """Displays RDF execution state logs for a given Run ID."""
    if not ctx.knowledge_layer:
        kce_logger.error("KnowledgeLayer not initialized. Cannot show log.")
        click.echo("Error: KnowledgeLayer not initialized.", err=True)
        sys.exit(1)

    # Determine the Run URI to query for, based on how RuntimeStateLogger constructs it
    # This base URI should ideally be a shared constant or configurable if it can change.
    # Assuming RuntimeStateLogger() is available in ctx.runtime_logger (from segment 3 init)
    base_execution_uri_for_query = ctx.runtime_logger.base_execution_uri if ctx.runtime_logger else "http://kce.com/executions/"
    run_uri_to_query = rdflib.URIRef(f"{base_execution_uri_for_query}{run_id}")

    click.echo(f"Fetching RDF execution state logs for Run ID: {run_id} (Querying for run URI <{run_uri_to_query}>)")
    kce_logger.info(f"Fetching RDF logs for run_id='{run_id}', run_uri='{run_uri_to_query}'.")

    # SPARQL query to fetch ExecutionStateNodes for the given run_uri_to_query
    log_query = f"""
    PREFIX kce: <{KCE}>
    PREFIX rdfs: <{RDFS}>
    PREFIX xsd: <{XSD}>
    SELECT ?state_node_uri ?event_type ?operation_uri ?status ?timestamp ?message ?hr_log_loc
    WHERE {{
        ?state_node_uri kce:belongsToRun <{run_uri_to_query}> .
        ?state_node_uri kce:eventType ?event_type .
        ?state_node_uri kce:status ?status .
        ?state_node_uri kce:timestamp ?timestamp .
        OPTIONAL {{ ?state_node_uri kce:triggeredByOperation ?operation_uri . }}
        OPTIONAL {{ ?state_node_uri rdfs:comment ?message . }}
        OPTIONAL {{ ?state_node_uri kce:humanReadableLogLocation ?hr_log_loc . }}
    }}
    ORDER BY ASC(?timestamp)
    """

    try:
        log_entries = ctx.knowledge_layer.execute_sparql_query(log_query)

        if not isinstance(log_entries, list):
            err_msg_log_type = f"Query for logs returned an unexpected type: {type(log_entries)}"
            kce_logger.error(err_msg_log_type)
            click.echo(err_msg_log_type, err=True)
            sys.exit(1) # Exit as this indicates a problem with KL or query

        if not log_entries:
            click.echo(f"No RDF execution state log entries found for Run ID: {run_id} (URI <{run_uri_to_query}>).", err=True)
            return

        click.echo(click.style(f"--- Execution State Log (RDF) for Run ID: {run_id} ---", bold=True))
        for i, entry in enumerate(log_entries):
            click.echo(click.style(f"Event {i+1}:", underline=True))
            click.echo(f"  State Node URI: <{entry.get('state_node_uri')}>")
            click.echo(f"  Timestamp: {entry.get('timestamp')}")
            click.echo(f"  Event Type: <{entry.get('event_type')}>")
            op_uri = entry.get('operation_uri')
            click.echo(f"  Operation URI: <{op_uri if op_uri else 'N/A'}>")
            click.echo(f"  Status: <{entry.get('status')}>")

            message = entry.get('message')
            if message:
                click.echo(f"  Message: {str(message)[:500]}{'...' if message and len(str(message)) > 500 else ''}")

            hr_log_loc_val = entry.get('hr_log_loc')
            if hr_log_loc_val:
                click.echo(f"  Human-Readable Log: {hr_log_loc_val}")
                if show_human_readable:
                    hr_content = ctx.knowledge_layer.get_human_readable_log(str(hr_log_loc_val))
                    if hr_content:
                        click.echo(click.style("    --- Human Log Content (JSON) ---", dim=True))
                        try:
                            parsed_json_log = json.loads(hr_content)
                            click.echo(json.dumps(parsed_json_log, indent=2))
                        except json.JSONDecodeError:
                            click.echo(hr_content) # Print as is if not valid JSON
                        click.echo(click.style("    --- End Human Log Content ---", dim=True))
                    else:
                        click.echo(click.style("    (Human-readable log content not found or empty)", fg="yellow"))
            click.echo("  ---")

    except RDFStoreError as e:
        err_msg_rdf_store = f"Error fetching RDF logs for run '{run_id}': {e}"
        kce_logger.error(err_msg_rdf_store, exc_info=ctx.verbose)
        click.echo(click.style(f"Error fetching RDF logs: {e}", fg='red'), err=True)
        sys.exit(1)
    except Exception as e:
        err_msg_unexpected = f"Unexpected error fetching logs for run '{run_id}': {e}"
        kce_logger.critical(err_msg_unexpected, exc_info=True)
        click.echo(click.style(f"Unexpected error fetching logs: {e}", fg='red'), err=True)
        sys.exit(1)

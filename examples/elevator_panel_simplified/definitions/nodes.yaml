# examples/elevator_panel_simplified/definitions/nodes.yaml

nodes:
  # Node 1: Initialize Rear Wall Assembly and basic Panel structures
  - id: "ex:InitializeRearWallNode"
    type: "AtomicNode"
    label: "Initialize Rear Wall Assembly and Panels"
    description: "Creates RearWallAssembly and basic ElevatorPanel instances with initial dimensions based on car internal size."
    inputs:
      - name: "car_internal_width" # This will be a top-level input to the workflow
        maps_to_rdf_property: "ex:carInternalWidth" # Will be set on the workflow instance context
        data_type: "integer"
        is_required: true
      - name: "car_internal_height" # Top-level input
        maps_to_rdf_property: "ex:carInternalHeight" # Will be set on the workflow instance context
        data_type: "integer"
        is_required: true
      - name: "workflow_instance_uri" # Special input: URI of the current kce:WorkflowInstanceData
        maps_to_rdf_property: "kce:instanceURI" # Convention for script to know its context
        data_type: "anyURI" # rdflib will treat this as URIRef
        is_required: true
    kce:hasPrecondition: |
      PREFIX ex: <http://example.com/ns#>
      ASK WHERE {
        # This node should only run if it has not yet been marked as initialized.
        FILTER NOT EXISTS { ex:InitializeRearWallNode ex:initializationComplete true . }
      }
    outputs:
      - name: "rear_wall_assembly_uri_output" # From script
        maps_to_rdf_property: "ex:createdRearWallAssemblyURI"
        data_type: "anyURI"
      - name: "initialization_complete_flag" # Fixed output to mark completion
        maps_to_rdf_property: "ex:initializationComplete"
        kce:hasFixedValue: true # This will be treated as a boolean true by the loader/executor
        data_type: "xsd:boolean"
        # kce:nodeContextUri: "ex:InitializeRearWallNode" # Subject is this node itself (default)
    invocation:
      type: "PythonScript"
      # Path relative to this YAML file's directory OR --base-script-path
      script_path: "../scripts/init_rear_wall.py"
      kce:argumentPassingStyle: "kce:CommandLineArguments" # Script will get inputs as command line args
      kce:parameterOrder:
        - "car_internal_width"
        - "car_internal_height"
        - "workflow_instance_uri"

  # Node 2: Calculate detailed dimensions for a single panel (thickness, bending height, final width)
  # This node might be called multiple times, once for each panel, or the script handles all panels.
  # For MVP, let's assume the script can find all panels linked to an assembly.
  - id: "ex:CalculatePanelDetailsNode"
    type: "AtomicNode"
    label: "Calculate Individual Panel Details"
    description: "Calculates thickness, bending height, and final width for all panels in an assembly."
    inputs:
      - name: "rear_wall_assembly_uri" # URI of the :RearWallAssembly instance
        maps_to_rdf_property: "ex:createdRearWallAssemblyURI" # From previous node's output (on workflow context)
        data_type: "anyURI"
        is_required: true
      # The script will query the RDF store for carInternalHeight/Width associated with the assembly
      # and find all :ElevatorPanel instances linked via ex:hasPanelPart.
    kce:hasPrecondition: |
      PREFIX kce: <http://kce.com/ontology/core#>
      PREFIX ex: <http://example.com/ns#>
      PREFIX domain: <http://kce.com/example/elevator_panel#>
      ASK WHERE {
        # ex:InitializeRearWallNode is the subject that has ex:createdRearWallAssemblyURI property.
        ex:InitializeRearWallNode ex:createdRearWallAssemblyURI ?assemblyUri .
        ?assemblyUri a domain:RearWallAssembly .
        # This node should only run if its main output flag (ex:panelDetailsCalculated)
        # has not yet been set on the assembly for this run.
        FILTER NOT EXISTS { ?assemblyUri ex:panelDetailsCalculated true . }
      }
    outputs:
      # This script modifies existing :ElevatorPanel instances by adding:
      # ex:panelThickness, ex:bendingHeight, ex:panelWidth
      - name: "panels_details_calculated_flag" # A flag to indicate completion
        maps_to_rdf_property: "ex:panelDetailsCalculated" # On the RearWallAssembly
        data_type: "boolean"
    invocation:
      type: "PythonScript"
      script_path: "../scripts/calculate_panel_details.py"
      kce:argumentPassingStyle: "kce:CommandLineArguments"
      kce:parameterOrder:
        - "rear_wall_assembly_uri"

  # Node 3: Calculate Bolt Holes for panels
  # Assumes panel height is already set on :ElevatorPanel instances.
  - id: "ex:CalculateBoltHolesNode"
    type: "AtomicNode"
    label: "Calculate Bolt Holes for Panels"
    description: "Calculates the number of bolt holes for all panels in an assembly."
    inputs:
      - name: "rear_wall_assembly_uri"
        maps_to_rdf_property: "ex:createdRearWallAssemblyURI"
        data_type: "anyURI"
        is_required: true
      # Script queries for all panels linked to the assembly and their heights.
    kce:hasPrecondition: |
      PREFIX kce: <http://kce.com/ontology/core#>
      PREFIX ex: <http://example.com/ns#>
      PREFIX domain: <http://kce.com/example/elevator_panel#>
      ASK WHERE {
        ex:InitializeRearWallNode ex:createdRearWallAssemblyURI ?assemblyUri .
        ?assemblyUri ex:panelDetailsCalculated true . # Depends on CalculatePanelDetailsNode
        FILTER NOT EXISTS { ?assemblyUri ex:boltHolesCalculated true . }
      }
    outputs:
      # Modifies :ElevatorPanel instances by adding ex:boltHoleCount and ex:boltHoleDiameter
      - name: "bolt_holes_calculated_flag"
        maps_to_rdf_property: "ex:boltHolesCalculated" # On the RearWallAssembly
        data_type: "boolean"
    invocation:
      type: "PythonScript"
      script_path: "../scripts/calculate_bolt_holes.py"
      kce:argumentPassingStyle: "kce:CommandLineArguments"
      kce:parameterOrder:
        - "rear_wall_assembly_uri"

  # Node 4: Determine Stiffeners for panels
  # Assumes panel width is already set on :ElevatorPanel instances.
  - id: "ex:DetermineStiffenersNode"
    type: "AtomicNode"
    label: "Determine Stiffeners for Panels"
    description: "Determines the number of stiffeners for all panels in an assembly."
    inputs:
      - name: "rear_wall_assembly_uri"
        maps_to_rdf_property: "ex:createdRearWallAssemblyURI"
        data_type: "anyURI"
        is_required: true
      # Script queries for all panels linked to the assembly and their widths.
    kce:hasPrecondition: |
      PREFIX kce: <http://kce.com/ontology/core#>
      PREFIX ex: <http://example.com/ns#>
      PREFIX domain: <http://kce.com/example/elevator_panel#>
      ASK WHERE {
        ex:InitializeRearWallNode ex:createdRearWallAssemblyURI ?assemblyUri .
        # This node might depend on panel details like width if stiffeners are based on width.
        # Assuming panel details (which includes width calculation) should be done first.
        ?assemblyUri ex:panelDetailsCalculated true .
        FILTER NOT EXISTS { ?assemblyUri ex:stiffenersDetermined true . }
      }
    outputs:
      # Modifies :ElevatorPanel instances by adding ex:stiffenerCount
      - name: "stiffeners_determined_flag"
        maps_to_rdf_property: "ex:stiffenersDetermined" # On the RearWallAssembly
        data_type: "boolean"
    invocation:
      type: "PythonScript"
      script_path: "../scripts/determine_stiffeners.py"
      kce:argumentPassingStyle: "kce:CommandLineArguments"
      kce:parameterOrder:
        - "rear_wall_assembly_uri"

  # Node 5: Composite Node to calculate costs for a single panel
  # This demonstrates a composite node. In a real scenario, the Python script for costs
  # might be complex enough to warrant being a single AtomicNode that internally handles sub-calcs.
  # Or, this composite node could be for an entire assembly if it iterates.
  # For MVP, let's make this a simple pass-through to an atomic cost calculation node.
  # This is more conceptual for MVP. A single AtomicNode "CalculateAllPanelCostsNode" might be more practical.

  # Atomic Node: Calculate Costs for ALL panels
  - id: "ex:CalculateAllPanelCostsNode"
    type: "AtomicNode"
    label: "Calculate Costs for All Panels"
    description: "Calculates material, processing, and total costs for all panels in an assembly."
    inputs:
      - name: "rear_wall_assembly_uri"
        maps_to_rdf_property: "ex:createdRearWallAssemblyURI"
        data_type: "anyURI"
        is_required: true
      # Script queries for all panels and their relevant properties (thickness, width, hole count, stiffener count)
    kce:hasPrecondition: |
      PREFIX kce: <http://kce.com/ontology/core#>
      PREFIX ex: <http://example.com/ns#>
      PREFIX domain: <http://kce.com/example/elevator_panel#>
      ASK WHERE {
        ex:InitializeRearWallNode ex:createdRearWallAssemblyURI ?assemblyUri .
        ?assemblyUri ex:boltHolesCalculated true .    # Depends on CalculateBoltHolesNode
        ?assemblyUri ex:stiffenersDetermined true . # Depends on DetermineStiffenersNode
        FILTER NOT EXISTS { ?assemblyUri ex:panelCostsCalculated true . }
      }
    outputs:
      # Modifies :ElevatorPanel instances by adding:
      # ex:materialCost, ex:processingCost, ex:panelTotalCost
      - name: "panel_costs_calculated_flag"
        maps_to_rdf_property: "ex:panelCostsCalculated" # On the RearWallAssembly
        data_type: "boolean"
    invocation:
      type: "PythonScript"
      script_path: "../scripts/calculate_panel_costs.py" # This script would iterate through panels
      kce:argumentPassingStyle: "kce:CommandLineArguments"
      kce:parameterOrder:
        - "rear_wall_assembly_uri"

  # Node 6: Sum Assembly Costs
  - id: "ex:SumAssemblyCostsNode"
    type: "AtomicNode"
    label: "Sum Total Assembly Costs"
    description: "Calculates the total cost for the entire rear wall assembly."
    inputs:
      - name: "rear_wall_assembly_uri"
        maps_to_rdf_property: "ex:createdRearWallAssemblyURI"
        data_type: "anyURI"
        is_required: true
      # Script queries for all panels' ex:panelTotalCost linked to the assembly
    kce:hasPrecondition: |
      PREFIX kce: <http://kce.com/ontology/core#>
      PREFIX ex: <http://example.com/ns#>
      PREFIX domain: <http://kce.com/example/elevator_panel#>
      ASK WHERE {
        ex:InitializeRearWallNode ex:createdRearWallAssemblyURI ?assemblyUri .
        ?assemblyUri ex:panelCostsCalculated true . # Depends on CalculateAllPanelCostsNode
        # This is the final node for cost calculation part of the goal.
        FILTER NOT EXISTS { ?assemblyUri ex:assemblyCostCalculated true . }
      }
    outputs:
      # Modifies :RearWallAssembly instance by adding ex:assemblyTotalCost
      - name: "assembly_cost_calculated_flag"
        maps_to_rdf_property: "ex:assemblyCostCalculated" # On the RearWallAssembly
        data_type: "boolean"
    invocation:
      type: "PythonScript"
      script_path: "../scripts/sum_assembly_costs.py"
      kce:argumentPassingStyle: "kce:CommandLineArguments"
      kce:parameterOrder:
        - "rear_wall_assembly_uri"

  # --- Example of a Composite Node (Conceptual for Panel Cost - can be simplified for MVP) ---
  # This demonstrates the structure but might be overly complex if CalculateAllPanelCostsNode is sufficient.
  # - id: "ex:CalculateSinglePanelCostCompositeNode"
  #   type: "CompositeNode"
  #   label: "Calculate Single Panel Cost (Composite)"
  #   description: "A sub-workflow to calculate various costs for one panel."
  #   inputs: # Inputs for the composite node itself
  #     - name: "panel_uri_for_costing"
  #       maps_to_rdf_property: "ex:targetPanelForCosting" # Property on the workflow instance context
  #       data_type: "anyURI"
  #   outputs: # Outputs from the composite node itself
  #     - name: "single_panel_total_cost_value"
  #       maps_to_rdf_property: "ex:computedSinglePanelCost" # Property on the workflow instance context
  #       data_type: "float"
  #   internal_workflow_uri: "ex:SinglePanelCostInternalWorkflow" # Defined in workflows.yaml
  #   mappings:
  #     inputs:
  #       - external_param_name: "panel_uri_for_costing" # Name of this composite node's input
  #         internal_workflow_input_name: "panel_to_process_uri" # Name of the input for the internal workflow
  #     outputs:
  #       - internal_workflow_output_name: "calculated_total_cost_for_panel" # Name of output from internal workflow
  #         external_param_name: "single_panel_total_cost_value" # Name of this composite node's output
@prefix : <http://elevator.com/ontology#> .
@prefix tmpl: <http://example.com/templates#> .

# 配合关系生成模板
tmpl:JointGenerationTemplate a :Template ;
    rdfs:label "配合关系生成" ;
    :problemType :JointGeneration ;
    :hasPhase tmpl:PanelSetupPhase, tmpl:JointGenerationPhase, tmpl:ResultFormatPhase .

tmpl:PanelSetupPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        INSERT DATA {
            :LeftPanel a :WallPanel ;
                      :name "左后壁" ;
                      :hasFace :LeftInnerFace, :LeftBottomFace, :LeftRightFace .
            :LeftInnerFace a :InnerFace ;
                         :faceType :InnerFace ;
                         :selectionMethod :ParallXZNearest .
            :LeftBottomFace a :BottomFace ;
                          :faceType :BottomFace ;
                          :selectionMethod :ParallXYNearest .
            :LeftRightFace a :RightFace ;
                         :faceType :RightFace ;
                         :selectionMethod :ParallFarthestYZ .
            
            :MiddlePanel a :WallPanel ;
                      :name "中间后壁" ;
                      :hasFace :MiddleInnerFace, :MiddleBottomFace, :MiddleLeftFace, :MiddleRightFace .
            :MiddleInnerFace a :InnerFace ;
                         :faceType :InnerFace ;
                         :selectionMethod :ParallXZNearest .
            :MiddleBottomFace a :BottomFace ;
                          :faceType :BottomFace ;
                          :selectionMethod :ParallXYNearest .
            :MiddleLeftFace a :LeftFace ;
                         :faceType :LeftFace ;
                         :selectionMethod :ParallYZNearest .
            :MiddleRightFace a :RightFace ;
                         :faceType :RightFace ;
                         :selectionMethod :ParallFarthestYZ .
            
            :RightPanel a :WallPanel ;
                      :name "右后壁" ;
                      :hasFace :RightInnerFace, :RightBottomFace, :RightLeftFace .
            :RightInnerFace a :InnerFace ;
                         :faceType :InnerFace ;
                         :selectionMethod :ParallXZNearest .
            :RightBottomFace a :BottomFace ;
                          :faceType :BottomFace ;
                          :selectionMethod :ParallXYNearest .
            :RightLeftFace a :LeftFace ;
                         :faceType :LeftFace ;
                         :selectionMethod :ParallYZNearest .
        }
    """ ;
    :order 1 .

tmpl:JointGenerationPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :RuleApplicationOperation ;
    :ruleType :JointRule ;
    :order 2 .

tmpl:ResultFormatPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        CONSTRUCT {
            _:result :joints ?jointList .
        }
        WHERE {
            SELECT (GROUP_CONCAT(?jointData; SEPARATOR=",") AS ?jointList)
            WHERE {
                ?joint a :Joint ;
                       :name ?name ;
                       :jointType ?type ;
                       :part1 ?part1 ;
                       :part2 ?part2 ;
                       :select_m1 ?select_m1 ;
                       :select_m2 ?select_m2 .
                BIND(CONCAT(
                    '{"name":"', ?name, '",',
                    '"type":"', ?type, '",',
                    '"part1_n":"', ?part1Name, '",',
                    '"select_m1":"', ?select_m1, '",',
                    '"part2_n":"', ?part2Name, '",',
                    '"select_m2":"', ?select_m2, '"}'
                ) AS ?jointData)
                ?part1 :name ?part1Name .
                ?part2 :name ?part2Name .
            }
        }
    """ ;
    :order 3 .

# 尺寸计算模板
tmpl:DimensionCalculationTemplate a :Template ;
    rdfs:label "尺寸计算" ;
    :problemType :DimensionCalculation ;
    :hasPhase tmpl:PanelSizeSetupPhase, tmpl:DimensionRulePhase, tmpl:ResultFormatDimensionPhase .

tmpl:PanelSizeSetupPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        INSERT DATA {
            :LeftPanel :width ($context.cabinet_width - 700) / 2 ;
                      :height $context.cabinet_height .
            :MiddlePanel :width 700 ;
                      :height $context.cabinet_height .
            :RightPanel :width ($context.cabinet_width - 700) / 2 ;
                      :height $context.cabinet_height .
        }
    """ ;
    :order 1 .

tmpl:DimensionRulePhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :RuleApplicationOperation ;
    :ruleType :DimensionRule ;
    :order 2 .

tmpl:ResultFormatDimensionPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        CONSTRUCT {
            _:result :dimensions ?dimensionList .
        }
        WHERE {
            SELECT (GROUP_CONCAT(?panelData; SEPARATOR=",") AS ?dimensionList)
            WHERE {
                ?panel a :WallPanel ;
                       :name ?name ;
                       :width ?width ;
                       :height ?height ;
                       :thickness ?thickness ;
                       :bendHeight ?bendHeight ;
                       :boltHoleCount ?boltHoleCount ;
                       :reinforcementCount ?reinforcementCount .
                BIND(CONCAT(
                    '{"壁板名称":"', ?name, '",',
                    '"壁板厚度":', ?thickness, ',',
                    '"折弯高度":', ?bendHeight, ',',
                    '"宽度":', ?width, ',',
                    '"高度":', ?height, ',',
                    '"螺孔数量":', ?boltHoleCount, ',',
                    '"加强筋数量":', ?reinforcementCount, '}'
                ) AS ?panelData)
            }
        }
    """ ;
    :order 3 .

# 成本计算模板
tmpl:CostCalculationTemplate a :Template ;
    rdfs:label "成本计算" ;
    :problemType :CostCalculation ;
    :hasPhase tmpl:MaterialCostPhase, tmpl:ProcessingCostPhase, tmpl:TotalCostPhase, tmpl:ResultFormatCostPhase .

tmpl:MaterialCostPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        INSERT {
            ?panel :materialCost 
                IF(?thickness == 1.3, 
                   IF(?width <= 500, 400, 600),
                   IF(?width <= 500, 500, 800))
        }
        WHERE {
            ?panel a :WallPanel ;
                   :thickness ?thickness ;
                   :width ?width .
        }
    """ ;
    :order 1 .

tmpl:ProcessingCostPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        INSERT {
            ?panel :processingCost 30 + (0.5 * ?boltHoleCount)
        }
        WHERE {
            ?panel a :WallPanel ;
                   :boltHoleCount ?boltHoleCount .
        }
    """ ;
    :order 2 .

tmpl:TotalCostPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        INSERT {
            ?panel :totalCost ?materialCost + ?processingCost
        }
        WHERE {
            ?panel a :WallPanel ;
                   :materialCost ?materialCost ;
                   :processingCost ?processingCost .
        }
    """ ;
    :order 3 .

tmpl:ResultFormatCostPhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :SPARQLQueryOperation ;
    :query """
        CONSTRUCT {
            _:result :costs ?costList .
        }
        WHERE {
            SELECT (GROUP_CONCAT(?costData; SEPARATOR=",") AS ?costList)
            WHERE {
                ?panel a :WallPanel ;
                       :name ?name ;
                       :materialCost ?materialCost ;
                       :processingCost ?processingCost ;
                       :totalCost ?totalCost .
                BIND(CONCAT(
                    '{"壁板名称":"', ?name, '",',
                    '"材料成本":', ?materialCost, ',',
                    '"加工成本":', ?processingCost, ',',
                    '"总成本":', ?totalCost, '}'
                ) AS ?costData)
            }
        }
    """ ;
    :order 4 .

# 设计变更模板
tmpl:DesignChangeTemplate a :Template ;
    rdfs:label "设计变更" ;
    :problemType :DesignChange ;
    :hasPhase tmpl:ApplyChangeRulePhase, tmpl:RecalculateDimensionsPhase, tmpl:RecalculateJointsPhase, tmpl:RecalculateCostPhase .

tmpl:ApplyChangeRulePhase a :Phase ;
    :phaseType :AtomicOperationPhase ;
    :operationType :RuleApplicationOperation ;
    :ruleType :DesignChangeRule ;
    :order 1 .

tmpl:RecalculateDimensionsPhase a :Phase ;
    :phaseType :SubTemplatePhase ;
    :callsTemplate tmpl:DimensionCalculationTemplate ;
    :order 2 .

tmpl:RecalculateJointsPhase a :Phase ;
    :phaseType :SubTemplatePhase ;
    :callsTemplate tmpl:JointGenerationTemplate ;
    :order 3 .

tmpl:RecalculateCostPhase a :Phase ;
    :phaseType :SubTemplatePhase ;
    :callsTemplate tmpl:CostCalculationTemplate ;
    :order 4 .
